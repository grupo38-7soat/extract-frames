on:
  push:
    branches:
      - main

env:
  CLUSTER_NAME: "infra-hackathon"  # Nome do cluster EKS
  SONAR_REQUIRED_SCORE: 60  # Pontuação mínima de qualidade do SonarQube

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v3
        with:
          python-version: "3.12"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Rodar os testes e gerar o relatório de cobertura
      - name: Run tests and generate coverage report
        run: |
          ls
          coverage3 run -m pytest
          coverage3 xml

      - name: Extract repository name
        id: repo-name
        run: echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

      # Instalar o SonarQube Scanner
      - name: Set up SonarQube Scanner
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # analysis token associated to your project
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }}

      - name: Delay for SonarQube Scanner
        run: sleep 15

      # Aguardar o resultado da análise e obter o status da qualidade
      - name: Check SonarQube quality gate status
        run: |
          STATUS=$(curl -s -u ${{ secrets.SONAR_TOKEN }} "${{ secrets.SONAR_URL }}/api/qualitygates/project_status?projectKey=$REPO_NAME" | jq -r .projectStatus.status)
          echo "SonarQube Quality Gate  status: $STATUS"
          if [[ "$STATUS" != "OK" ]]; then
            echo "SonarQube Quality Gate failed: Quality is below the threshold!";
            exit 1;
          fi

          # Verificar a pontuação de qualidade se necessário
          SCORE=$(curl -s -u ${{ secrets.SONAR_TOKEN }} "${{ secrets.SONAR_URL }}/api/measures/component?component=$REPO_NAME&metricKeys=coverage" | jq -r .component.measures[0].value)
          echo "SonarQube quality score: $SCORE"
          if (( $(echo "$SCORE < $SONAR_REQUIRED_SCORE" | bc -l) )); then
            echo "SonarQube Quality Gate failed: Quality score is less than 80%!";
            exit 1;
          fi
          echo "SonarQube quality score is OK"

  deploy-aws:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: "3.12"

    - name: Install AWS SAM CLI
      run: |
        pip install aws-sam-cli

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Build SAM application
      run: |
        sam build --no-cached --debug

    - name: Deploy SAM application
      run: |
        sam deploy --stack-name lambda-extract-frames --no-confirm-changeset --no-fail-on-empty-changeset --capabilities CAPABILITY_IAM